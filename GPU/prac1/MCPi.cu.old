#include <cuda_runtime.h>
#include "helper_cuda.h"
#include "device_launch_parameters.h"

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <iostream>
#include <string.h>
#include <curand_kernel.h>
#define SEED 1234 
#define ITER 30000000
#define EPBLOCK 64
#define REDEPBLOCK 64
#define TPBLOCK 256
#define WARPSIZE 32

using namespace std;

__global__ void setup_rng_states(curandState *state, const int n)
{
  int id = threadIdx.x + blockIdx.x * blockDim.x;
  int stride = gridDim.x * blockDim.x;
  for(; id < n; id += stride) curand_init(SEED, id, 0, &state[id]);
}

__global__ void generate_coordinates(curandState *state, float *x,
                                                          float *y, const int n)
{
  int id = threadIdx.x + blockIdx.x * blockDim.x;
  int stride = gridDim.x * blockDim.x;
  curandState localState = state[id];
  for(; id < n; id += stride){
    x[id] = curand_uniform(&localState);
    y[id] = curand_uniform(&localState);
  }
}

__global__ void monte_carlo(float *x, float *y, float *bAverages, const int N, const int n)
{
  __shared__ float averages[TPBLOCK];
  unsigned int id = threadIdx.x + blockIdx.x * blockDim.x,
               stride = gridDim.x * blockDim.x,
               count = 0;

  float xl, yl, total = 0;

  for(; id < N; id += stride, total++){
    xl = x[id];
    yl = y[id];
    count += (xl * xl + yl * yl) <=1;
  }


  averages[threadIdx.x] = (float) count / total;
  
  __syncthreads();

  if(threadIdx.x < WARPSIZE)
  { 
    float smallAverage = 0;
    for(int i = threadIdx.x; i < TPBLOCK; i+= WARPSIZE)
      smallAverage += averages[i];
    smallAverage /= TPBLOCK / WARPSIZE;
    int idx = blockIdx.x * WARPSIZE + threadIdx.x;
    if (idx < n)
      bAverages[idx] = smallAverage;
  }
}

__global__ void reduce(float* values, const int n, float *bAverages)
{
  __shared__ float averages[TPBLOCK];
  unsigned int id = threadIdx.x + blockIdx.x * blockDim.x,
               stride = gridDim.x * blockDim.x;
  float tAve = 0, num = 0;

  for(; id < n; id += stride, num++){
    tAve += values[id];
  }

  averages[threadIdx.x] = tAve / num;

  __syncthreads();

  if(threadIdx.x < WARPSIZE)
  { 
    float smallAverage = 0;
    for(int i = threadIdx.x; i < TPBLOCK; i+= WARPSIZE)
      smallAverage += averages[i];
    smallAverage /= TPBLOCK / WARPSIZE;
    bAverages[blockIdx.x * WARPSIZE + threadIdx.x] = smallAverage;
  }
}

void checkerror(cudaError err)
{ if (err != cudaSuccess) fputs(cudaGetErrorString(err), stdout);
	return;
}

int main()//int argc, char* argv)
{
  unsigned int blocksPerGrid, redBlocksPerGrid;
  float *x, *y, *averages, *redAverages, *hostPi;

  blocksPerGrid = ((ITER + EPBLOCK - 1) / EPBLOCK + TPBLOCK - 1) / TPBLOCK;
  curandState *devStates;

  //space for state rng states
  checkerror(cudaMalloc((void **) &devStates, ITER * sizeof(curandState)));

  checkerror(cudaMalloc((void **) &x, ITER * sizeof(float)));

  checkerror(cudaMalloc((void **) &y, ITER * sizeof(float)));

  setup_rng_states<<<blocksPerGrid, TPBLOCK>>>(devStates, ITER);
  checkerror(cudaGetLastError());


  generate_coordinates<<<blocksPerGrid, TPBLOCK>>>(devStates, x, y ,ITER);
  checkerror(cudaGetLastError());

  checkerror(cudaMalloc((void **) &averages, 
                                     WARPSIZE * blocksPerGrid * sizeof(float)));
  monte_carlo<<<blocksPerGrid, TPBLOCK>>>(x, y, averages, ITER, WARPSIZE * blocksPerGrid);
  checkerror(cudaGetLastError());

  redBlocksPerGrid = ((WARPSIZE * blocksPerGrid + REDEPBLOCK - 1) / REDEPBLOCK + 
                                                  TPBLOCK - 1) / TPBLOCK;
  //printf("%d", redBlocksPerGrid);

  checkerror(cudaMalloc((void **) &redAverages, WARPSIZE * 
                                             redBlocksPerGrid * sizeof(float)));
  
  reduce<<<redBlocksPerGrid, TPBLOCK>>>(averages, 
                                      WARPSIZE * blocksPerGrid,
                                      redAverages);
  checkerror(cudaGetLastError());

  hostPi = new float[WARPSIZE * redBlocksPerGrid];
  checkerror(cudaMemcpy(hostPi, redAverages,
                                    WARPSIZE * redBlocksPerGrid * sizeof(float)
                                                     , cudaMemcpyDeviceToHost));
  float sum = 0;
  for(int i = 0; i < WARPSIZE * redBlocksPerGrid; i++ )
    sum += hostPi[i];
  printf("%f", 4 * sum / (WARPSIZE * redBlocksPerGrid));


  /*
   int niter=0;
   double x,y;
   int i,count=0; // # of points in the 1st quadrant of unit circle 
   double z;
   double pi;

   printf("Enter the number of iterations used to estimate pi: ");
   scanf("%d",&niter);

   // initialize random numbers
   srand(SEED);
   count=0;
   for ( i=0; i<niter; i++) {
      x = (double)rand()/RAND_MAX;
      y = (double)rand()/RAND_MAX;
      z = x*x+y*y;
      if (z<=1) count++;
      }
   pi=(double)count/niter*4;
   printf("# of trials= %d , estimate of pi is %g \n",niter,pi);
   */

  free(hostPi);
  cudaFree(devStates);
  cudaFree(x);
  cudaFree(y);
  cudaFree(averages);
  cudaFree(redAverages);

  return 0;
}
